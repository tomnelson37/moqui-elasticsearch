<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">

    <service verb="index" noun="DataDocuments" authenticate="false" transaction-timeout="3600">
        <description>Indexes documents passed using ElasticSearch. The DataDocument must have an indexName.</description>
        <implements service="org.moqui.EntityServices.receive#DataFeed"/>
        <in-parameters>
            <parameter name="dataFeedId" required="false"/>
            <parameter name="feedStamp" type="Timestamp" required="false"/>
            <parameter name="getOriginalDocuments" type="Boolean" default="false"/>
            <parameter name="verifyIndexes" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="documentVersionList" type="List" required="true"/>
            <parameter name="originalDocumentList" type="List" required="false"/>
        </out-parameters>
        <actions><script><![CDATA[
            import org.elasticsearch.action.bulk.BulkItemResponse
            import org.elasticsearch.action.bulk.BulkRequestBuilder
            import org.elasticsearch.action.bulk.BulkResponse
            import org.elasticsearch.client.Client
            import org.elasticsearch.action.get.GetResponse
            import org.elasticsearch.action.index.IndexResponse
            import org.slf4j.Logger
            import org.slf4j.LoggerFactory
            import org.moqui.context.ExecutionContext
            import org.moqui.elasticsearch.ElasticSearchUtil

            int docsPerBulk = 1000

            ExecutionContext ec = context.ec
            Client elasticSearchClient = ec.getTool("ElasticSearch", Client.class)
            Logger logger = LoggerFactory.getLogger("org.moqui.search.SearchServices.indexDataDocuments")

            // Make sure all indices exist
            if (verifyIndexes) {
                Set indexNames = new HashSet()
                for (Map document in documentList) indexNames.add(document._index)
                for (String indexName in indexNames) ElasticSearchUtil.checkCreateIndex(indexName, ec)
            }

            documentVersionList = []
            originalDocumentList = getOriginalDocuments ? [] : null
            BulkRequestBuilder bulkBuilder = elasticSearchClient.prepareBulk()
            int curBulkDocs = 0
            for (Map document in documentList) {
                 logger.warn("====== Indexing document: ${document}")

                String _index = document._index
                String _type = document._type
                String _id = document._id
                String _timestamp = document._timestamp
                // As of ES 2.0 _index, _type, _id, and _timestamp shouldn't be in document to be indexed
                document.remove('_index'); document.remove('_type'); document.remove('_id');
                document.remove('_timestamp');

                if (getOriginalDocuments) {
                    // this may fail for a number of reasons, like index doesn't exist yet, so catch the exception
                    try {
                        GetResponse gr = elasticSearchClient.prepareGet(_index, _type, _id).execute().actionGet()
                        Map originalDocument = gr.getSourceAsMap()
                        if (originalDocument != null) {
                            // As of ES 2.0 _index, _type, _id aren't included in the document
                            originalDocument._index = gr.getIndex()
                            originalDocument._type = gr.getType()
                            originalDocument._id = gr.getId()
                            // how to get timestamp? doesn't seem to be in API: document._timestamp = hit.get?
                            originalDocument._version = gr.getVersion()
                            originalDocumentList.add(originalDocument ?: [:])
                        } else {
                            originalDocumentList.add([:])
                        }
                    } catch (Exception e) {
                        logger.info("Could not get original document for [${_index}, ${_type}, ${_id}]: ${e.toString()}")
                        originalDocumentList.add([:])
                    }
                }
                bulkBuilder.add(elasticSearchClient.prepareIndex(_index, _type, _id)
                        .setIndex(_index).setType(_type).setId(_id).setTimestamp(_timestamp).setSource(document))
                curBulkDocs++

                if (curBulkDocs >= docsPerBulk) {
                    BulkResponse bulkResponse = bulkBuilder.execute().actionGet()
                    if (bulkResponse.hasFailures()) {
                        ec.message.addError(bulkResponse.buildFailureMessage())
                        break
                    }

                    BulkItemResponse[] itemResponses = bulkResponse.getItems()
                    int itemResponsesSize = itemResponses.length
                    for (int i = 0; i < itemResponsesSize; i++) documentVersionList.add(itemResponses[i].getVersion())

                    // create a new bulk builder for the next set
                    curBulkDocs = 0
                    bulkBuilder = elasticSearchClient.prepareBulk()
                }

                // Individual index operation approach
                // IndexResponse response = elasticSearchClient.prepareIndex(_index, _type, _id)
                //         .setIndex(_index).setType(_type).setId(_id).setTimestamp(_timestamp)
                //         .setSource(document).execute().actionGet()
                // documentVersionList.add(response.getVersion())
                // if (logger.isTraceEnabled()) logger.trace("Indexed [${_index}, ${_type}, ${_id}] version [${response.getVersion()}]")
                // logger.warn("====== Indexed [${_index}, ${_type}, ${_id}] version [${response.getVersion()}] created? ${response.isCreated()}}")
            }
            if (curBulkDocs > 0) {
                BulkResponse bulkResponse = bulkBuilder.execute().actionGet()
                if (bulkResponse.hasFailures()) ec.message.addError(bulkResponse.buildFailureMessage())

                BulkItemResponse[] itemResponses = bulkResponse.getItems()
                int itemResponsesSize = itemResponses.length
                for (int i = 0; i < itemResponsesSize; i++) documentVersionList.add(itemResponses[i].getVersion())
            }
        ]]></script></actions>
    </service>
    <service verb="put" noun="DataDocumentMappings">
        <in-parameters><parameter name="indexName" required="true"/></in-parameters>
        <actions><script>org.moqui.elasticsearch.ElasticSearchUtil.putIndexMappings(indexName, ec)</script></actions>
    </service>

    <service verb="index" noun="DataFeedDocuments" authenticate="false" transaction-timeout="3600">
        <description>Index all documents associated with the feed within the date range. Recommend calling through the IndexDataFeedDocuments service job.</description>
        <in-parameters>
            <parameter name="dataFeedId" required="true"/>
            <parameter name="fromUpdateStamp" type="Timestamp"/>
            <parameter name="thruUpdateStamp" type="Timestamp"/>
        </in-parameters>
        <out-parameters>
            <parameter name="documentsIndexed" type="Integer"/>
        </out-parameters>
        <actions>
            <set field="startTime" from="System.currentTimeMillis()"/>
            <entity-find entity-name="moqui.entity.feed.DataFeedDocument" list="dfDocList" cache="true">
                <econdition field-name="dataFeedId"/></entity-find>
            <set field="documentsIndexed" from="0"/>
            <script><![CDATA[
                import org.moqui.context.ExecutionContext
                import org.moqui.elasticsearch.ElasticSearchUtil
                import java.util.concurrent.Future

                ExecutionContext ec = context.ec
                for (Map dfDoc in dfDocList) {
                    ArrayList<Map> documentList = ec.entity.entityDataDocument.getDataDocuments(dfDoc.dataDocumentId, null, fromUpdateStamp, thruUpdatedStamp)
                    if (!documentList) continue
                    // make sure the index exists
                    ElasticSearchUtil.checkCreateIndex((String) documentList.get(0).get("_index"), ec)

                    // index the documents
                    int docListSize = documentList.size()
                    // NOTE: doing multiple threads doesn't make a big difference, the bulk indexing makes a huge difference, so effectively disabling this in the if expression
                    if (false) {
                        int numThreads = Runtime.getRuntime().availableProcessors() / 2
                        ec.logger.info("Indexing ${docListSize} type ${dfDoc.dataDocumentId} documents for feed ${dataFeedId} with ${numThreads} threads")
                        int subListSize = docListSize / numThreads
                        ArrayList<Future> futureList = new ArrayList<>(numThreads)
                        for (int i = 0; i < numThreads - 1; i++) {
                            futureList.add(ec.service.async().name("org.moqui.search.SearchServices.index#DataDocuments")
                                    .parameter("documentList", documentList.subList(i * subListSize, (i + 1) * subListSize))
                                    .parameter("verifyIndexes", false)
                                    .callFuture())
                        }
                        futureList.add(ec.service.async().name("org.moqui.search.SearchServices.index#DataDocuments")
                                .parameter("documentList", documentList.subList((numThreads-1) * subListSize, docListSize))
                                .parameter("verifyIndexes", false)
                                .callFuture())
                        for (Future future in futureList) future.get()
                    } else {
                        ec.logger.info("Indexing ${docListSize} type ${dfDoc.dataDocumentId} documents for feed ${dataFeedId}")
                        ec.service.sync().name("org.moqui.search.SearchServices.index#DataDocuments").parameter("documentList", documentList).call()
                    }
                    documentsIndexed += documentList.size()
                }
            ]]></script>

            <!-- old simple approach, just one call for all documents in feed:
            <set field="documentList" from="ec.entity.getEntityDataFeed().getFeedDocuments(dataFeedId, fromUpdateStamp, thruUpdatedStamp)"/>
            <set field="feedStamp" from="thruUpdateStamp ?: ec.user.nowTimestamp"/>
            <if condition="documentList">
                <service-call name="org.moqui.search.SearchServices.index#DataDocuments" in-map="context"/>
            </if>
            <set field="documentsIndexed" from="documentList?.size() ?: 0"/>
            -->
            <log level="info" message="Indexed ${documentsIndexed} documents for feed ${dataFeedId} in ${System.currentTimeMillis() - startTime}ms"/>
            <message>Indexed ${documentsIndexed} documents for feed ${dataFeedId} in ${System.currentTimeMillis() - startTime}ms</message>
        </actions>
    </service>

    <service verb="index" noun="WikiSpacePages">
        <description>Find all pages in space, make sure each has a WikiPage record, and index the page for searching.</description>
        <in-parameters>
            <parameter name="wikiSpaceId"/>
            <parameter name="dataDocumentId" required="true"/>
        </in-parameters>
        <actions>
            <service-call name="org.moqui.impl.WikiServices.get#WikiSpacePages" in-map="[wikiSpaceId:wikiSpaceId]" out-map="context"/>

            <set field="recordsCreated" from="0"/>
            <set field="documentList" from="[]"/>
            <iterate list="allChildFileFlatList" entry="allChildFileFlat">
                <service-call name="org.moqui.impl.WikiServices.get#WikiPageId" out-map="getWpiResult"
                              in-map="[wikiSpaceId:wikiSpaceId, pagePath:allChildFileFlat.path, createIfMissing:true]"/>
                <if condition="getWpiResult.createdRecord"><set field="recordsCreated" from="recordsCreated + 1"/></if>

                <script>documentList.addAll(ec.entity.getDataDocuments(dataDocumentId,
                    ec.entity.conditionFactory.makeCondition([wikiPageId:getWpiResult.wikiPageId]), null, null))</script>
            </iterate>
            <script>ec.service.sync().name("org.moqui.search.SearchServices.index#DataDocuments").parameter("documentList", documentList).call()</script>

            <message>Found and indexed ${allChildFileFlatList.size()} pages in Wiki Space [${wikiSpaceId}], created DB records for ${recordsCreated}.</message>
        </actions>
    </service>

    <service verb="search" noun="DataDocuments">
        <description>
            The queryString format is the ElasticSearch supported one, based on the Lucene query strings which are
            partly documented here:

            http://lucene.apache.org/core/4_9_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html
            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax

            Sort options are described here:

            http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-sort.html
        </description>
        <in-parameters>
            <parameter name="indexName" required="true"/>
            <parameter name="documentType"><description>The ElasticSearch document type. For DataDocument based docs
                this is the dataDocumentId.</description></parameter>
            <parameter name="queryString" required="true"/>
            <parameter name="orderByFields" type="List"><parameter name="orderByField"/></parameter>
            <parameter name="pageIndex" type="Integer" default="0"/>
            <parameter name="pageSize" type="Integer" default="20"/>
            <parameter name="flattenDocument" type="Boolean" default="true"/>
            <parameter name="highlightMatchedFields" type="Boolean" />
        </in-parameters>
        <out-parameters>
            <parameter name="documentList" type="List">
                <description>List of documents, each document is a Map with nested Maps and Lists of Maps.</description>
                <parameter name="document" type="Map"/>
            </parameter>
            <parameter name="documentListCount" type="Integer"><description>The total count of hits, not just the
                limited number returned.</description></parameter>
            <parameter name="documentListPageIndex" type="Integer"/>
            <parameter name="documentListPageSize" type="Integer"/>
            <parameter name="documentListPageMaxIndex" type="Integer"/>
            <parameter name="documentListPageRangeLow" type="Integer"/>
            <parameter name="documentListPageRangeHigh" type="Integer"/>
        </out-parameters>
        <actions><script><![CDATA[
            /* useful docs for query API: http://www.elasticsearch.org/guide/reference/api/search/uri-request/ */

            import org.elasticsearch.client.Client
            import org.elasticsearch.action.get.MultiGetItemResponse
            import org.elasticsearch.action.get.MultiGetRequestBuilder
            import org.elasticsearch.action.search.SearchRequestBuilder
            import org.elasticsearch.index.query.QueryBuilders
            import org.elasticsearch.search.SearchHit
            import org.elasticsearch.search.SearchHits
            import org.elasticsearch.search.sort.SortOrder
            import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder
            import org.moqui.context.ExecutionContext
            import org.moqui.elasticsearch.ElasticSearchUtil
            import org.elasticsearch.search.fetch.subphase.highlight.HighlightField
            import java.util.List
            ExecutionContext ec = context.ec
            Client elasticSearchClient = ec.getTool("ElasticSearch", Client.class)

            fromOffset = pageIndex * pageSize
            sizeLimit = pageSize

            documentList = []
            // make sure index exists
            ElasticSearchUtil.checkCreateIndex(indexName, ec)

            // get the search hits
            SearchRequestBuilder srb = elasticSearchClient.prepareSearch().setIndices(indexName)
                    .setQuery(QueryBuilders.queryStringQuery((String) queryString))
                    .setFrom(fromOffset).setSize(sizeLimit)
                    .setFetchSource(true)
            if (highlightMatchedFields) {
                srb = srb.highlighter(new HighlightBuilder().field("*").requireFieldMatch(false))
            }
            if (documentType) srb.setTypes((String) documentType)
            for (String orderByField in orderByFields) {
                boolean ascending = true
                if (orderByField.charAt(0) == '-') {
                    ascending = false
                    orderByField = orderByField.substring(1)
                } else if (orderByField.charAt(0) == '+') {
                    ascending = true
                    orderByField = orderByField.substring(1)
                }
                // ec.logger.warn("========= adding ${orderByField}, ${ascending}")
                srb.addSort(orderByField, ascending ? SortOrder.ASC : SortOrder.DESC)
            }

            SearchHits hits = srb.execute().actionGet().getHits()
            for (SearchHit hit in hits) {
                Map document = hit.getSource()
                // As of ES 2.0 _index, _type, _id aren't included in the document
                document._index = hit.getIndex()
                document._type = hit.getType()
                document._id = hit.getId()
                // how to get timestamp? doesn't seem to be in API: document._timestamp = hit.get?
                document._version = hit.getVersion()
                def highlightedFields = []
                if(highlightMatchedFields) {
                    for(Map.Entry entry : hit.getHighlightFields()) {
                        def value = entry.getValue().getName()
                        highlightedFields.add(value)
                        //logger.info("${entry.getValue()}")
                    }
                }
                document = flattenDocument ? flattenNestedMap(document) : document
                if(highlightMatchedFields) {
                    document._highlightedFields = highlightedFields
                }
                documentList.add(document)
            }

            // get the total search count
            SearchRequestBuilder countSrb = elasticSearchClient.prepareSearch().setIndices(indexName)
                    .setQuery(QueryBuilders.simpleQueryStringQuery((String) queryString)).setSize(0)
            if (documentType) countSrb.setTypes((String) documentType)
            documentListCount = countSrb.execute().actionGet().getHits().totalHits()

            // calculate the pagination values
            documentListPageIndex = pageIndex
            documentListPageSize = pageSize
            documentListPageMaxIndex = ((BigDecimal) documentListCount - 1).divide(documentListPageSize, 0, BigDecimal.ROUND_DOWN) as int
            documentListPageRangeLow = documentListPageIndex * documentListPageSize + 1
            documentListPageRangeHigh = (documentListPageIndex * documentListPageSize) + documentListPageSize
            if (documentListPageRangeHigh > documentListCount) documentListPageRangeHigh = documentListCount
        ]]></script></actions>
    </service>

    <!--
        This service as it is no longer works with the castrated API in ElasticSearch 5.0.0
        See the ElasticSearchUtil.aggregationSearch() and simpleAggSearch() methods

    <service verb="search" noun="CountBySource">
        <description>
            Search documents with a "count" type search, meant for analytics searches with aggregations.
            Use either the sourceJson or sourceMap parameters for the search source.

            A good overview of the use of aggregations is available at: http://www.elastic.co/guide/en/elasticsearch/guide/current/aggregations.html

            For detailed documentation of aggregations including all aggregation types see: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html
        </description>
        <in-parameters>
            <parameter name="indexName" required="true"/>
            <parameter name="documentTypeList" type="List">
                <description>The ElasticSearch document type. For DataDocument based docs this is the dataDocumentId.</description>
                <parameter name="documentType"/>
            </parameter>
            <parameter name="maxResults" type="Integer" default="1000"/>
            <parameter name="sourceJson"><description>Search source as JSON String, pass this or sourceMap and not both</description></parameter>
            <parameter name="sourceMap" type="Map"><description>Source source as Map (to convert to JSON), pass this or sourceJson and not both</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="searchResponse" type="org.elasticsearch.action.search.SearchResponse"/>
            <!- - Get this with "searchResponse.toString()" if needed: <parameter name="responseString"/> - ->
        </out-parameters>
        <actions><script><![CDATA[
            import groovy.json.JsonBuilder
            import groovy.json.JsonOutput
            import org.elasticsearch.client.Client
            import org.elasticsearch.action.search.SearchRequestBuilder
            import org.elasticsearch.action.search.SearchResponse
            import org.elasticsearch.index.query.QueryBuilders
            import org.moqui.context.ExecutionContext
            import org.moqui.elasticsearch.ElasticSearchUtil

            ExecutionContext ec = context.ec

            if (sourceJson && sourceMap) {
                ec.message.addError("Both sourceJson and sourceMap passed, must pass one or the other")
                return
            }
            if (sourceMap) {
                JsonBuilder jb = new JsonBuilder()
                jb.call((Map) sourceMap)
                sourceJson = jb.toString()
            }

            ec.logger.warn("CountBySource in ${indexName} on ${documentTypeList} sourceJson: " + JsonOutput.prettyPrint((String) sourceJson))

            Client elasticSearchClient = ec.getTool("ElasticSearch", Client.class)
            // make sure index exists
            ElasticSearchUtil.checkCreateIndex(indexName, ec)

            // get the search hits (.setSearchType('count'))
            SearchRequestBuilder srb = elasticSearchClient.prepareSearch().setIndices((String) indexName).setSize(maxResults)
            if (documentTypeList) srb.setTypes((String[]) documentTypeList.toArray(new String[documentTypeList.size()]))
            srb.setQuery(QueryBuilders.wrapperQuery((String) sourceJson))
            ec.logger.warn("CountBySource srb: ${srb.toString()}")

            searchResponse = srb.execute().actionGet()
            // aggregations = searchResponse.getAggregations().getAsMap()
            // responseString = searchResponse.toString()
            ]]></script></actions>
    </service>
    -->
</services>
